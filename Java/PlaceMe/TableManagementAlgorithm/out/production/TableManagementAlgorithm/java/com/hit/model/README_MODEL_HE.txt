# הסבר חוויית שימוש במערכת (בעברית)

## איך מתחילים לעבוד עם המערכת?
1. **יוצרים מופע של מסעדה:**
   - מוסיפים שולחנות לפי קיבולת ומזהה.
2. **בוחרים אסטרטגיה (נאיבי/אופטימלי):**
   - דרך ReservationStrategyFactory לפי סוג.
3. **יוצרים קונטקסט (TableReservationContext):**
   - מעבירים את המסעדה והאסטרטגיה.
4. **מבצעים פעולות (הזמנה, ביטול, תור):**
   - הכל דרך הקונטקסט.

## מה קורה מאחורי הקלעים?

### הזמנת שולחן
- הקונטקסט פונה לאסטרטגיה שנבחרה.
- האסטרטגיה בודקת זמינות שולחנות:
  - ב־Naive: חיפוש שולחן פנוי ראשון לפי קיבולת.
  - ב־Optimized: חיפוש חכם לפי לוח זמנים, קיבולת, ומניעת חפיפות.
- אם נמצא שולחן פנוי:
  - השולחן מסומן כתפוס בלוח הזמנים.
  - הלקוח משויך לשולחן.
- אם אין שולחן פנוי:
  - הלקוח נכנס לרשימת המתנה (פר-שולחן או גלובלית, תלוי באסטרטגיה).

### ביטול הזמנה
- הקונטקסט פונה לאסטרטגיה.
- האסטרטגיה מסירה את הלקוח מהמיפוי ומהלוח זמנים.
- אם יש לקוחות בתור, מנסה להקצות את השולחן ללקוח הבא.

### הצטרפות לתור
- הלקוח מצורף לרשימת המתנה (אם לא קיים כבר).

### לוח הזמנים (TimeSlotManager)
- מנהל את כל ההזמנות לפי יום ושעה.
- לכל TimeSlot (יום+שעה) יש סט של מזהי שולחנות תפוסים.
- חיפוש שולחן פנוי מתבצע לפי קיבולת, יום ושעה, ובמידת הצורך במקביל (virtual threads).
- עדכון סטטוס שולחן משפיע גם על זמנים סמוכים (כדי למנוע double booking).

### רשימות המתנה
- ב־Naive: תור פשוט (FIFO) לכל המסעדה.
- ב־Optimized: רשימות המתנה חכמות, אפשר גם פר-שולחן.

### דוגמה לזרימת עבודה מלאה
1. **לקוח מבצע הזמנה:**
   - המערכת בודקת זמינות.
   - אם יש מקום – מקצה שולחן.
   - אם אין – מוסיף לתור.
2. **לקוח מבטל הזמנה:**
   - המערכת משחררת את השולחן.
   - אם יש ממתינים – מקצה את השולחן ללקוח הבא.
3. **החלפת אסטרטגיה:**
   - אפשר להחליף בזמן ריצה (למשל, לעבור לאופטימלי בשעות עומס).

### יתרונות המערכת
- גמישות: אפשר להחליף אלגוריתם בקלות.
- יעילות: חיפוש שולחן במקביל במסעדות גדולות.
- מודולריות: כל רכיב ניתן להרחבה ושדרוג.
- בדיקות: כיסוי טסטים רחב, כולל מקרי קצה.

---
